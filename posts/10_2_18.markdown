

[HOME](https://avijr.com)

---

# Drain and Give Life
## October 1, 2018

I managed to get a functional version of the life system working in-game. You can hold left click on a cube with the life componenet added to give it life or hold right click to take its life. Once it reaches 0 health, it is dead completely.

### Visual Scripting

I use the visual scripting system to cast a ray from the center of the screen forward when holding either left or right click. I look at what I hit and assign it and its life component to the C++ component.

Here's what the graph looks like:

![Raycasting](/images/player_raycasting.png)

- <span style="color:#F61530">Event Tick:</span> &nbsp; Called every frame - propogates to all connected nodes to tell them to activate. When a node recives this signal, it checks its required inputs and forces all those nodes to evaluate before it activates.
- <span style="color:#F61530">Pressing Give Life:</span> &nbsp; Gets the player's script's variable *pressingGiveLife* and passes along that boolean value
- <span style="color:#F61530">Pressing Take Life:</span> &nbsp; Gets *pressingTakeLife*
- <span style="color:white">Branch:</span> &nbsp; Branches to the line trace if either pressingGiveLife or pressingTakeLife is true but not if both are pressed


- <span style="color:#4AA350">Get Player Camera's Manager:</span> &nbsp; Gets a refrence to the player's camera
- <span style="color:#4AA350">Get Actor Location:</span> &nbsp; Gets that camera's location
- <span style="color:#4AA350">Get Actor Forward Vector:</span> &nbsp; Gets that camera's forward vector (center of the screen)
- <span style="color:#4AA350">Range:</span> &nbsp; Gets the variable range from the player's script - multiplied by the forward vector (which is normalized) to determine how far the raycast should go


- <span style="color:#397DD8">Line Trace By Channel:</span> &nbsp; Takes as inputs the camera's location and a distance forward from that position (determined by the forward vector * range)
- <span style="color:#4AA350">Break Hit Result:</span> &nbsp; Takes as input what we hit and outputs the specific Actor hit
- <span style="color:#4AA350">Get Component by class:</span> &nbsp; Takes as input the Actor hit and outputs its *Life Component*. If it doesn't have one, it instead outputs NULL


- <span style="color:white">Branch:</span> &nbsp; Branches to assign our target and life component if we actually hit something, otherwise it will still assign those values, but this time to null
- <span style="color:white">Set (Target):</span> &nbsp; Sets the variable *target* in the player's script
- <span style="color:white">Set (Life Component):</span> &nbsp; Sets the variable *lifeComponent*. This variable is used when the script wants to actually call that component's functions to start taking or giving life (both functions below)

### C++ Coding

The C++ components to this system are the life component and the new parts to the player script.

```cpp
float ULife::TakeLife(float amount)
{
	float delta = amount * 1/60;

	// If alive
	if (life > 0)
	{
		float newLife = life - delta;
		// If alive and damaged
		if (newLife >= 0)
		{
			life = newLife;
			return delta;
		}
		// If alive and brought below 0 health
		else if (newLife < 0 && life > 0)
		{
			float temp = life;
			life = 0;
			return temp;
		}
	}
	//If dead
	return 0;
}
```

```cpp
float ULife::GiveLife(float amount)
{
	float delta = amount * 1 / 60;
	// Not dead
	if (life != 0)
	{
		float newLife = life + delta;

		// If undead
		if (life < 0)
		{
			// If healed
			if (newLife < 0)
			{
				life = newLife;
				return delta;
			}
			// If brought above 0 life
			else if (newLife >= 0)
			{
				float temp = life;
				life = 0;
				return -temp;
			}
		}
		// If alive
		else
		{
			life = newLife;
			return delta;
		}
	}
	return 0;
}
```

---

[HOME](https://avijr.com)
